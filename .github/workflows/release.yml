name: Release
on:
  push:
    branches:
      - release # or main

jobs:
  tag-release:
    name: tag-release
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
      - name: install plugins
        run: npm install @semantic-release/git @semantic-release/changelog -D

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  build-linux:
    needs:
      - tag-release
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Get tag'
        id: tagName
        uses: "WyriHaximus/github-action-get-previous-tag@v1"

      # docker image build
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: build and push docker
        run: |
          REGISTRY=$(echo "ghcr.io/${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          GIT_TAG=$(git describe --tags 2>/dev/null || echo "develop")
          GIT_BRANCH=${GITHUB_REF#refs/heads/}
          
          GIT_TAG_IMAGE="${REGISTRY}:${GIT_TAG}"
          GIT_BRANCH_IMAGE="${REGISTRY}:${GIT_BRANCH}"
          
          docker pull ${GIT_TAG_IMAGE} || true
          docker pull ${GIT_BRANCH_IMAGE} || true
          
          docker build \
            -t ${GIT_TAG_IMAGE} \
            -t ${GIT_BRANCH_IMAGE} .
          
          if [[ ! -z "$GIT_TAG" && "$GIT_TAG" == v* ]]; then
          docker push ${GIT_TAG_IMAGE}
          fi
          
          if [ ! -z "$GIT_BRANCH" ]; then
          docker push ${GIT_BRANCH_IMAGE}
          fi
